import io

import pandas as pd
import streamlit as st

from app.data import customers_data, inventory_data, sales_data
from app.data_generators import (
    generate_sample_customers,
    generate_sample_inventory,
    generate_sample_sales,
)
from app.data_validator import DataValidator
from app.pages import dashboard_page, upload_page

upload_page.render()


# Data upload section.
def read_file_content(uploaded_file: io.BytesIO) -> pd.DataFrame:
    if uploaded_file.name.endswith(".csv"):
        return pd.read_csv(uploaded_file)
    elif uploaded_file.name.endswith(".xlsx"):
        return pd.read_excel(uploaded_file)
    else:
        raise ValueError("–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É")


required_files_col, optional_files_col = st.columns(2)

with required_files_col:
    st.subheader("üìÇ –û–±–æ–≤'—è–∑–∫–æ–≤—ñ —Ñ–∞–π–ª–∏")

    sales_file = st.file_uploader(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–¥–∞–∂—ñ–≤ (CSV –∞–±–æ Excel)",
        type=["csv", "xlsx"],
        help=f"–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(sales_data.column_names)}",
    )
    if sales_file is not None:
        try:
            sales_df = read_file_content(sales_file)
            errors = DataValidator(sales_df, sales_data).validate()

            if not errors:
                sales_data.session_state = sales_df
                st.success("–§–∞–π–ª –ø—Ä–æ–¥–∞–∂—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!", icon="‚úÖ")
                st.dataframe(sales_df.head(10), use_container_width=True)
            else:
                st.error(
                    "–ü–æ–º–∏–ª–∫–∏ —É —Ñ–∞–π–ª—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤:\n"
                    + "\n".join(f"- {error}" for error in errors),
                    icon="‚ùå",
                )
        except Exception as err:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {err}", icon="‚ùå")

    inventory_file = st.file_uploader(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —Å–∫–ª–∞–¥—Å—å–∫–∏—Ö –∑–∞–ø–∞—Å—ñ–≤ (CSV –∞–±–æ Excel)",
        type=["csv", "xlsx"],
        help=f"–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(inventory_data.column_names)}",
    )
    if inventory_file is not None:
        try:
            inventory_df = read_file_content(inventory_file)
            errors = DataValidator(inventory_df, inventory_data).validate()

            if not errors:
                inventory_data.session_state = inventory_df
                st.success("–§–∞–π–ª —Å–∫–ª–∞–¥—Å—å–∫–∏—Ö –∑–∞–ø–∞—Å—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!", icon="‚úÖ")
                st.dataframe(inventory_df.head(10), use_container_width=True)
            else:
                st.error(
                    "–ü–æ–º–∏–ª–∫–∏ —É —Ñ–∞–π–ª—ñ —Å–∫–ª–∞–¥—Å—å–∫–∏—Ö –∑–∞–ø–∞—Å—ñ–≤:\n"
                    + "\n".join(f"- {error}" for error in errors),
                    icon="‚ùå",
                )
        except Exception as err:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {err}", icon="‚ùå")

with optional_files_col:
    st.subheader("–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏")

    customers_file = st.file_uploader(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∫–ª—ñ—î–Ω—Ç—ñ–≤ (CSV –∞–±–æ Excel)",
        type=["csv", "xlsx"],
        help=f"–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(customers_data.column_names)}",
    )
    if customers_file is not None:
        try:
            customers_df = read_file_content(customers_file)
            errors = DataValidator(customers_df, customers_data).validate()

            if not errors:
                customers_data.session_state = customers_df
                st.success("–§–∞–π–ª –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!", icon="‚úÖ")
                st.dataframe(customers_df.head(10), use_container_width=True)
            else:
                st.error(
                    "–ü–æ–º–∏–ª–∫–∏ —É —Ñ–∞–π–ª—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n\n"
                    + "\n".join(f"- {error}" for error in errors),
                    icon="‚ùå",
                )
        except Exception as err:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {err}", icon="‚ùå")

# Sample data download section.
st.divider()
st.subheader("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ñ–∞–π–ª—ñ–≤")

sample_sales_col, sample_inventory_col, sample_customers_col = st.columns(3)

with sample_sales_col:
    sample_sales = generate_sample_sales().to_csv(index=False).encode("utf-8")
    st.download_button(
        "üõí –ü—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É –ø—Ä–æ–¥–∞–∂—ñ–≤",
        sample_sales,
        "sample_sales.csv",
        "text/csv",
        help="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ",
    )

with sample_inventory_col:
    sample_inventory = generate_sample_inventory().to_csv(index=False).encode("utf-8")
    st.download_button(
        "üì¶ –ü—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É —Å–∫–ª–∞–¥—É",
        sample_inventory,
        "sample_inventory.csv",
        "text/csv",
        help="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É –∑—ñ —Å–∫–ª–∞–¥—Å—å–∫–∏–º–∏ –¥–∞–Ω–∏–º–∏",
    )

with sample_customers_col:
    sample_customers = generate_sample_customers().to_csv(index=False).encode("utf-8")
    st.download_button(
        "üë• –ü—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É –∫–ª—ñ—î–Ω—Ç—ñ–≤",
        sample_customers,
        "sample_customers.csv",
        "text/csv",
        help="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
    )

# Further actions section.
st.divider()

required_data_loaded = (
    sales_data.key in st.session_state and inventory_data.key in st.session_state
)
if required_data_loaded:
    st.success(
        "–í—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Ñ–∞–π–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.", icon="‚úÖ"
    )
    st.link_button(
        "‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏",
        dashboard_page.url,
        use_container_width=True,
        type="primary",
    )
else:
    st.warning(
        (
            "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Ñ–∞–π–ª–∏ (–ø—Ä–æ–¥–∞–∂—ñ —Ç–∞ —Å–∫–ª–∞–¥—Å—å–∫—ñ –∑–∞–ø–∞—Å–∏) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É "
            "–¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏."
        ),
        icon="‚ö†Ô∏è",
    )
