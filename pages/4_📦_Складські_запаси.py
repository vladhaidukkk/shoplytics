import pandas as pd
import plotly.express as px
import streamlit as st

from app.data import inventory_data, sales_data
from app.pages import inventory_page, upload_page

inventory_page.render()
inventory_df = inventory_data.session_state
sales_df = sales_data.session_state


# Check if inventory data is uploaded.
if inventory_df is None:
    st.warning(
        f"–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ —Å–∫–ª–∞–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ '{upload_page.title}'", icon="‚ö†Ô∏è"
    )
    st.stop()

# Sidebar with filters.
with st.sidebar:
    st.subheader("–§—ñ–ª—å—Ç—Ä–∏")

    stores = sorted(inventory_df["store"].unique())
    selected_stores = st.multiselect(
        "–ú–∞–≥–∞–∑–∏–Ω–∏",
        options=stores,
        default=stores,
        help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –º–∞–≥–∞–∑–∏–Ω—ñ–≤",
    )

    categories = sorted(inventory_df["category"].unique())
    selected_categories = st.multiselect(
        "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤",
        options=categories,
        default=categories,
        help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
    )

    sizes = sorted(inventory_df["size"].unique())
    selected_sizes = st.multiselect(
        "–†–æ–∑–º—ñ—Ä–∏",
        options=sizes,
        default=sizes,
        help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–æ–∑–º—ñ—Ä—ñ–≤",
    )

    excess_threshold = st.slider(
        "–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –Ω–∞–¥–ª–∏—à–∫–æ–≤–æ–≥–æ –∑–∞–ø–∞—Å—É",
        min_value=1.0,
        max_value=5.0,
        value=3.0,
        step=0.5,
        help="–¢–æ–≤–∞—Ä–∏ –∑ –∑–∞–ø–∞—Å–æ–º –±—ñ–ª—å—à–µ –Ω—ñ–∂ (–∫–æ–µ—Ñ. √ó –º—ñ–Ω. –∫-—Å—Ç—å) –≤–≤–∞–∂–∞—é—Ç—å—Å—è –Ω–∞–¥–ª–∏—à–∫–æ–≤–∏–º–∏",
    )

    dead_stock_days = st.slider(
        "–ü–µ—Ä—ñ–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–¥–Ω—ñ–≤)",
        min_value=30,
        max_value=180,
        value=30,
        step=30,
        help="–¢–æ–≤–∞—Ä–∏ –±–µ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º —Ü—å–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –≤–≤–∞–∂–∞—é—Ç—å—Å—è –º–µ—Ä—Ç–≤–∏–º —Å–∫–ª–∞–¥–æ–º",
    )

# Apply filters.
mask = (
    (inventory_df["store"].isin(selected_stores))
    & (inventory_df["category"].isin(selected_categories))
    & (inventory_df["size"].isin(selected_sizes))
)

filtered_df = inventory_df[mask]

# Calculate KPIs.
st.subheader("üìä –ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏")
kpi1, kpi2, kpi3, kpi4, kpi5 = st.columns(5)

# Calculate base metrics
total_sku = filtered_df["product_id"].nunique()
total_items = filtered_df["stock_qty"].sum()

with kpi1:
    st.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –∫-—Å—Ç—å SKU", f"{total_sku:,}")

with kpi2:
    low_stock_mask = filtered_df["stock_qty"] < filtered_df["min_qty"]
    low_stock = filtered_df[low_stock_mask].shape[0]
    st.metric("–ù–∏–∑—å–∫–∏–π –∑–∞–ø–∞—Å", f"{low_stock:,}")

with kpi3:
    zero_stock = filtered_df[filtered_df["stock_qty"] == 0].shape[0]
    st.metric("–ù—É–ª—å–æ–≤–∏–π –∑–∞–ø–∞—Å", f"{zero_stock:,}")

with kpi4:
    excess_mask = filtered_df["stock_qty"] > (filtered_df["min_qty"] * excess_threshold)
    excess_stock = filtered_df[excess_mask].shape[0]
    st.metric("–ù–∞–¥–ª–∏—à–∫–æ–≤–∏–π –∑–∞–ø–∞—Å", f"{excess_stock:,}")

with kpi5:
    to_order_mask = (filtered_df["stock_qty"] <= filtered_df["min_qty"]) & (
        filtered_df["stock_qty"] > 0
    )
    to_order = filtered_df[to_order_mask].shape[0]
    st.metric("–î–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", f"{to_order:,}")


# Create tabs for different views.
stock_level_tab, low_stock_tab, dead_stock_tab, table_tab = st.tabs(
    [
        "üìâ –†—ñ–≤–µ–Ω—å –∑–∞–ª–∏—à–∫—ñ–≤",
        "üßØ –ù–∏–∑—å–∫–∏–π –∑–∞–ø–∞—Å",
        "üßä –ú–µ—Ä—Ç–≤–∏–π —Å–∫–ª–∞–¥",
        "üîç –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è",
    ]
)


def color_status(row):
    if row["stock_qty"] == 0:
        return ["background-color: #ffcccc" for _ in row]  # Red
    elif row["stock_qty"] < row["min_qty"]:
        return ["background-color: #fff3cd" for _ in row]  # Yellow
    return ["background-color: #d1e7dd" for _ in row]  # Green


with stock_level_tab:
    st.subheader("üìâ –†—ñ–≤–µ–Ω—å –∑–∞–ª–∏—à–∫—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö")

    stock_by_cat = (
        filtered_df.groupby(["category", "store"])["stock_qty"].sum().reset_index()
    )
    total_by_cat = (
        stock_by_cat.groupby("category")["stock_qty"]
        .sum()
        .reset_index()
        .rename(columns={"stock_qty": "total"})
    )
    stock_by_cat = stock_by_cat.merge(total_by_cat, on="category")

    chart_labels = {
        "category": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
        "stock_qty": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
        "store": "–ú–∞–≥–∞–∑–∏–Ω",
    }
    fig = px.bar(
        stock_by_cat,
        x="category",
        y="stock_qty",
        color="store",
        labels=chart_labels,
        text="stock_qty",
    )

    for cat in total_by_cat["category"].unique():
        total = total_by_cat[total_by_cat["category"] == cat]["total"].iloc[0]
        fig.add_annotation(
            x=cat,
            y=total,
            text=f"–í—Å—å–æ–≥–æ: {total:,}",
            showarrow=False,
            yshift=10,
        )

    fig.update_traces(textposition="inside")
    st.plotly_chart(fig, use_container_width=True)

with low_stock_tab:
    st.subheader("üßØ –¢–æ–≤–∞—Ä–∏ –∑ –Ω–∏–∑—å–∫–∏–º –∑–∞–ø–∞—Å–æ–º")

    low_stock_df = filtered_df[filtered_df["stock_qty"] < filtered_df["min_qty"]]
    if not low_stock_df.empty:
        styled_df = low_stock_df[
            ["product_name", "store", "category", "stock_qty", "min_qty"]
        ].style.apply(color_status, axis=1)

        st.dataframe(
            styled_df,
            column_config={
                "product_name": "–ù–∞–∑–≤–∞",
                "store": "–ú–∞–≥–∞–∑–∏–Ω",
                "category": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
                "stock_qty": st.column_config.NumberColumn(
                    "–ü–æ—Ç–æ—á–Ω–∏–π", help="–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ"
                ),
                "min_qty": st.column_config.NumberColumn(
                    "–ú—ñ–Ω—ñ–º—É–º", help="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å"
                ),
            },
            height=400,
        )
    else:
        st.info("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –Ω–∏–∑—å–∫–∏–º –∑–∞–ø–∞—Å–æ–º", icon="‚ÑπÔ∏è")

with dead_stock_tab:
    st.subheader("üßä –ú–µ—Ä—Ç–≤–∏–π —Å–∫–ª–∞–¥")

    if sales_df is not None:
        last_sale_date = (
            sales_df.groupby(["store", "product_id"])["date"]
            .max()
            .reset_index()
            .rename(columns={"date": "last_sale_date"})
        )

        dead_stock_df = filtered_df.merge(
            last_sale_date, on=["store", "product_id"], how="left"
        )

        dead_stock_threshold = pd.Timestamp("now") - pd.Timedelta(days=dead_stock_days)
        dead_stock_mask = (
            (dead_stock_df["last_sale_date"] < dead_stock_threshold)
            | (dead_stock_df["last_sale_date"].isna())
        ) & (dead_stock_df["stock_qty"] > dead_stock_df["min_qty"] * excess_threshold)

        dead_stock_items = dead_stock_df[dead_stock_mask].sort_values(
            "stock_qty", ascending=False
        )

        if not dead_stock_items.empty:
            st.dataframe(
                dead_stock_items[
                    ["product_name", "store", "stock_qty", "last_sale_date"]
                ],
                column_config={
                    "product_name": "–ù–∞–∑–≤–∞",
                    "store": "–ú–∞–≥–∞–∑–∏–Ω",
                    "stock_qty": "–ó–∞–ª–∏—à–æ–∫",
                    "last_sale_date": st.column_config.DatetimeColumn(
                        "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂—É", format="DD.MM.YYYY"
                    ),
                },
                height=400,
            )
        else:
            st.info("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ –Ω–∞–¥–ª–∏—à–∫–æ–≤–∏–º –∑–∞–ø–∞—Å–æ–º", icon="‚ÑπÔ∏è")
    else:
        st.warning("–î–ª—è –∞–Ω–∞–ª—ñ–∑—É –º–µ—Ä—Ç–≤–æ–≥–æ —Å–∫–ª–∞–¥—É –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤", icon="‚ö†Ô∏è")

with table_tab:
    st.subheader("üìã –ü–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Å–∫–ª–∞–¥—Å—å–∫–∏—Ö –∑–∞–ø–∞—Å—ñ–≤")

    columns = ["product_name", "category", "size", "stock_qty", "min_qty", "store"]

    styled_df = filtered_df[columns].style.apply(color_status, axis=1)

    with st.expander("‚ÑπÔ∏è –ö–æ–ª—å–æ—Ä–æ–≤–µ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤"):
        st.markdown(
            """
            - üî¥ **–ß–µ—Ä–≤–æ–Ω–∏–π** - –¢–æ–≤–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–∞ —Å–∫–ª–∞–¥—ñ (–Ω—É–ª—å–æ–≤–∏–π –∑–∞–ø–∞—Å)
            - üü° **–ñ–æ–≤—Ç–∏–π** - –ù–∏–∑—å–∫–∏–π –∑–∞–ø–∞—Å (–º–µ–Ω—à–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ)
            - üü¢ **–ó–µ–ª–µ–Ω–∏–π** - –ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞–ø–∞—Å—É
            """
        )

    st.dataframe(
        styled_df,
        column_config={
            "product_name": "–¢–æ–≤–∞—Ä",
            "category": "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
            "size": "–†–æ–∑–º—ñ—Ä",
            "stock_qty": "–ó–∞–ø–∞—Å",
            "min_qty": "–ú—ñ–Ω. –∑–∞–ø–∞—Å",
            "store": "–ú–∞–≥–∞–∑–∏–Ω",
        },
        height=600,
    )

    csv = filtered_df[columns].to_csv(index=False).encode("utf-8")
    st.download_button("üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏", csv, "inventory_export.csv", "text/csv")
