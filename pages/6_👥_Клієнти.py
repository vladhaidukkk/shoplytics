from datetime import datetime, timedelta

import pandas as pd
import plotly.express as px
import streamlit as st

from app.data import customers_data, sales_data
from app.pages import customers_page, upload_page

customers_page.render()
customers_df = customers_data.session_state
sales_df = sales_data.session_state

if customers_df is None:
    st.warning(
        f"–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ '{upload_page.title}'",
        icon="‚ö†Ô∏è",
    )
    st.stop()

with st.sidebar:
    st.subheader("–§—ñ–ª—å—Ç—Ä–∏")

    stores = sorted(customers_df["store"].unique())
    selected_stores = st.multiselect(
        "–ú–∞–≥–∞–∑–∏–Ω–∏",
        options=stores,
        default=stores,
        help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –º–∞–≥–∞–∑–∏–Ω—ñ–≤",
    )

    genders = sorted(customers_df["gender"].unique())
    selected_gender = st.selectbox(
        "–°—Ç–∞—Ç—å", options=["–í—Å—ñ", *genders], help="–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó"
    )

    age_min = int(customers_df["age"].min())
    age_max = int(customers_df["age"].max())
    age_range = st.slider(
        "–í—ñ–∫–æ–≤–∞ –≥—Ä—É–ø–∞",
        min_value=age_min,
        max_value=age_max,
        value=(age_min, age_max),
        help="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω –≤—ñ–∫—É",
    )

    status_filters = st.multiselect(
        "–°—Ç–∞—Ç—É—Å –∫–ª—ñ—î–Ω—Ç—ñ–≤",
        options=["–ù–æ–≤—ñ", "–ü–æ—Å—Ç—ñ–π–Ω—ñ", "VIP"],
        help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤. –ö–ª—ñ—î–Ω—Ç –º–æ–∂–µ –º–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ",
    )

    vip_threshold = st.number_input(
        "–ü–æ—Ä—ñ–≥ VIP (—Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç, –≥—Ä–Ω)",
        min_value=1000,
        value=10000,
        step=1000,
        help="–ö–ª—ñ—î–Ω—Ç–∏ –∑ —Å—É–º–æ—é –≤–∏—Ç—Ä–∞—Ç –≤–∏—â–µ —Ü—å–æ–≥–æ –ø–æ—Ä–æ–≥—É –≤–≤–∞–∂–∞—é—Ç—å—Å—è VIP",
    )

    inactive_days = st.number_input(
        "–ü–µ—Ä—ñ–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–¥–Ω—ñ–≤)",
        min_value=30,
        value=60,
        step=30,
        help="–ö–ª—ñ—î–Ω—Ç–∏ –±–µ–∑ –ø–æ–∫—É–ø–æ–∫ –ø—Ä–æ—Ç—è–≥–æ–º —Ü—å–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –≤–≤–∞–∂–∞—é—Ç—å—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º–∏",
    )

mask = (customers_df["store"].isin(selected_stores)) & (
    customers_df["age"].between(age_range[0], age_range[1])
)

if selected_gender != "–í—Å—ñ":
    mask &= customers_df["gender"] == selected_gender

filtered_df = customers_df[mask].copy()

# Add status flags instead of a single segment
filtered_df["is_new"] = filtered_df["total_orders"] == 1
filtered_df["is_regular"] = filtered_df["total_orders"] > 1
filtered_df["is_vip"] = filtered_df["total_spent"] >= vip_threshold

# Apply status filters
if status_filters:
    status_mask = pd.Series(False, index=filtered_df.index)
    if "–ù–æ–≤—ñ" in status_filters:
        status_mask |= filtered_df["is_new"]
    if "–ü–æ—Å—Ç—ñ–π–Ω—ñ" in status_filters:
        status_mask |= filtered_df["is_regular"]
    if "VIP" in status_filters:
        status_mask |= filtered_df["is_vip"]
    filtered_df = filtered_df[status_mask]

# Create a combined status label for display
filtered_df["statuses"] = filtered_df.apply(
    lambda row: " + ".join(
        ["VIP" if row["is_vip"] else "", "–ü–æ—Å—Ç—ñ–π–Ω–∏–π" if row["is_regular"] else "–ù–æ–≤–∏–π"]
    ).strip(" + "),
    axis=1,
)

st.subheader("üìä –ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏")
kpi1, kpi2, kpi3, kpi4, kpi5 = st.columns(5)

total_customers = len(filtered_df)
with kpi1:
    st.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤", f"{total_customers:,}")

with kpi2:
    avg_orders = filtered_df["total_orders"].mean()
    st.metric("–°–µ—Ä–µ–¥–Ω—è –∫-—Å—Ç—å –ø–æ–∫—É–ø–æ–∫", f"{avg_orders:.1f}")

with kpi3:
    avg_check = (filtered_df["total_spent"] / filtered_df["total_orders"]).mean()
    st.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫", f"{avg_check:,.2f} ‚Ç¥")

with kpi4:
    loyal_customers = (filtered_df["total_orders"] > 1).sum()
    loyal_percent = (loyal_customers / total_customers) * 100
    st.metric("–ü–æ—Å—Ç—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏", f"{loyal_percent:.1f}%")

with kpi5:
    vip_customers = (filtered_df["total_spent"] >= vip_threshold).sum()
    vip_percent = (vip_customers / total_customers) * 100
    st.metric("VIP-–∫–ª—ñ—î–Ω—Ç–∏", f"{vip_percent:.1f}%")

tab_names = [
    "üéØ –°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è",
    "üìä –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫",
    "üí∞ LTV",
    "üë• –î–µ–º–æ–≥—Ä–∞—Ñ—ñ—è",
    "üìà –î–∏–Ω–∞–º—ñ–∫–∞",
    "üîç –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è",
]
tabs = st.tabs(tab_names)

with tabs[0]:  # Segmentation
    st.subheader("üéØ –°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤")
    col1, col2 = st.columns(2)

    with col1:
        # Calculate status combinations
        status_combinations = filtered_df["statuses"].value_counts()
        fig1 = px.pie(
            values=status_combinations.values,
            names=status_combinations.index,
            title="–†–æ–∑–ø–æ–¥—ñ–ª –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏",
        )
        st.plotly_chart(fig1, use_container_width=True)

        # Show key stats
        st.markdown("#### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö:")
        st.markdown(
            f"üÜï –ù–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {filtered_df['is_new'].sum():,} ({filtered_df['is_new'].mean()*100:.1f}%)"
        )
        st.markdown(
            f"üîÑ –ü–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {filtered_df['is_regular'].sum():,} ({filtered_df['is_regular'].mean()*100:.1f}%)"
        )
        st.markdown(
            f"üëë VIP –∫–ª—ñ—î–Ω—Ç—ñ–≤: {filtered_df['is_vip'].sum():,} ({filtered_df['is_vip'].mean()*100:.1f}%)"
        )

    with col2:
        store_dist = filtered_df["store"].value_counts()
        fig2 = px.bar(
            x=store_dist.index,
            y=store_dist.values,
            title="–†–æ–∑–ø–æ–¥—ñ–ª –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏",
            labels={"x": "–ú–∞–≥–∞–∑–∏–Ω", "y": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤"},
        )
        st.plotly_chart(fig2, use_container_width=True)

with tabs[1]:  # Frequency
    st.subheader("üìä –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–∫—É–ø–æ–∫")

    fig3 = px.histogram(
        filtered_df,
        x="total_orders",
        title="–†–æ–∑–ø–æ–¥—ñ–ª –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å",
        labels={"total_orders": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å", "count": "–ö-—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤"},
    )
    st.plotly_chart(fig3, use_container_width=True)

    orders_stats = filtered_df["total_orders"].describe()
    cols = st.columns(3)
    cols[0].metric("–ú–µ–¥—ñ–∞–Ω–Ω–∞ –∫-—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å", f"{orders_stats['50%']:.1f}")
    cols[1].metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫-—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å", f"{orders_stats['max']:.0f}")
    freq_pct = (filtered_df["total_orders"] <= 2).mean() * 100
    cols[2].markdown(f"**–Ü–Ω—Å–∞–π—Ç:** {freq_pct:.1f}% –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑—Ä–æ–±–∏–ª–∏ 1-2 –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

with tabs[2]:  # LTV
    st.subheader("üí∞ –ê–Ω–∞–ª—ñ–∑ Lifetime Value")
    col1, col2 = st.columns(2)

    with col1:
        # Create status comparison
        status_comparison = pd.DataFrame(
            {"–°—Ç–∞—Ç—É—Å": filtered_df["statuses"], "–í–∏—Ç—Ä–∞—Ç–∏": filtered_df["total_spent"]}
        )

        fig4 = px.box(
            status_comparison,
            x="–°—Ç–∞—Ç—É—Å",
            y="–í–∏—Ç—Ä–∞—Ç–∏",
            title="–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
            labels={"–í–∏—Ç—Ä–∞—Ç–∏": "–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç, –≥—Ä–Ω"},
        )
        st.plotly_chart(fig4, use_container_width=True)

    with col2:
        avg_ltv = filtered_df.groupby("store")["total_spent"].mean()
        fig5 = px.bar(
            x=avg_ltv.index,
            y=avg_ltv.values,
            title="–°–µ—Ä–µ–¥–Ω—ñ–π LTV –∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏",
            labels={"x": "–ú–∞–≥–∞–∑–∏–Ω", "y": "–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç, –≥—Ä–Ω"},
        )
        st.plotly_chart(fig5, use_container_width=True)

with tabs[3]:  # Demographics
    st.subheader("üë• –î–µ–º–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
    col1, col2 = st.columns(2)

    with col1:
        fig6 = px.histogram(
            filtered_df,
            x="age",
            title="–í—ñ–∫–æ–≤–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –∫–ª—ñ—î–Ω—Ç—ñ–≤",
            labels={"age": "–í—ñ–∫", "count": "–ö-—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤"},
        )
        st.plotly_chart(fig6, use_container_width=True)

    with col2:
        gender_stats = (
            filtered_df.groupby("gender")
            .agg({"customer_id": "count", "total_spent": "mean"})
            .reset_index()
        )

        fig7 = px.bar(
            gender_stats,
            x="gender",
            y="customer_id",
            title="–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Å—Ç–∞—Ç—Ç—é",
            text=gender_stats["total_spent"].round(2).astype(str) + " ‚Ç¥",
            labels={"gender": "–°—Ç–∞—Ç—å", "customer_id": "–ö-—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤"},
        )
        st.plotly_chart(fig7, use_container_width=True)

with tabs[4]:  # Dynamics
    st.subheader("üìà –î–∏–Ω–∞–º—ñ–∫–∞ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ—ó –±–∞–∑–∏")

    monthly_signups = pd.DataFrame(
        {
            "month": pd.to_datetime(filtered_df["signup_date"]).dt.to_period("M"),
            "count": 1,
        }
    )
    monthly_signups = monthly_signups.groupby("month")["count"].sum()

    fig8 = px.line(
        x=monthly_signups.index.astype(str),
        y=monthly_signups.values,
        title="–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏ –ø–æ –º—ñ—Å—è—Ü—è—Ö",
        labels={"x": "–ú—ñ—Å—è—Ü—å", "y": "–ö-—Å—Ç—å –Ω–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"},
    )
    st.plotly_chart(fig8, use_container_width=True)

    inactive_threshold = datetime.now() - timedelta(days=inactive_days)
    inactive_mask = filtered_df["last_purchase_date"] < inactive_threshold
    inactive_count = inactive_mask.sum()
    inactive_pct = (inactive_count / total_customers) * 100

    st.metric(
        "–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏",
        f"{inactive_count} ({inactive_pct:.1f}%)",
        help=f"–ö–ª—ñ—î–Ω—Ç–∏ –±–µ–∑ –ø–æ–∫—É–ø–æ–∫ –æ—Å—Ç–∞–Ω–Ω—ñ {inactive_days} –¥–Ω—ñ–≤",
    )

with tabs[5]:  # Table
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤")

    display_cols = [
        "customer_id",
        "total_orders",
        "total_spent",
        "last_purchase_date",
        "statuses",
    ]
    table_df = filtered_df[display_cols].copy()
    table_df["avg_check"] = table_df["total_spent"] / table_df["total_orders"]

    st.dataframe(
        table_df,
        column_config={
            "customer_id": "ID –∫–ª—ñ—î–Ω—Ç–∞",
            "total_orders": "–ö-—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å",
            "total_spent": st.column_config.NumberColumn(
                "–°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç", format="%.2f ‚Ç¥"
            ),
            "avg_check": st.column_config.NumberColumn("–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫", format="%.2f ‚Ç¥"),
            "last_purchase_date": st.column_config.DatetimeColumn(
                "–û—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∞", format="DD.MM.YYYY"
            ),
            "statuses": "–°—Ç–∞—Ç—É—Å–∏ –∫–ª—ñ—î–Ω—Ç–∞",
        },
        height=400,
    )

    csv = table_df.to_csv(index=False).encode("utf-8")
    st.download_button(
        "üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏",
        csv,
        "customers_analysis.csv",
        "text/csv",
        help="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –≤ —Ñ–æ—Ä–º–∞—Ç—ñ CSV",
    )
